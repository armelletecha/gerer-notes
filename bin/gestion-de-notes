#!/usr/bin/env ruby
require 'gli'
require 'gestion-de-notes.rb'

include GLI::App
program_desc 'Gérer l enregistrerment des notes d etudiant'
version GestionDeNotes::VERSION
subcommand_option_handling :normal
arguments :strict

#option globale pour specifier le fichier a utiliser pour la liste des etudiants
desc 'utiliser la liste des etudiants par defaut ou un fichier specifie par l utilisateur'
default_value 'liste_etudiants_defaut.csv'
arg_name 'fichier_etudiants'
flag [:e,:fichier_etudiants]

#option globale pour specifier le fichier de description du groupe de cours
desc 'utiliser le fichier de description du groupe cours par defaut ou un fichier specifie par l utilisateur'
default_value 'informations_cours_defaut.csv'
arg_name 'fichier_cours'
flag [:c,:fichier_cours]

#1 ere fonctionalite 
desc 'Enregistrer note d\'un etudiant'
arg_name ' code_permanent id_devoir note'
command :enregistrer_note do |c|
  c.action do |global_options,options,args|
  fichier_etudiants = global_options[:fichier_etudiants]
  fichier_cours = global_options[:fichier_cours]
  code_permanent = args.shift 
  id_devoir = args.shift
  note = args.shift
  
    GestionDeNotes.fichier_etudiants = fichier_etudiants
  GestionDeNotes.fichier_cours = fichier_cours

#enregistrement de la note de l etudiant
  g = GestionDeNotes.enregistrer_note(code_permanent, id_devoir, note)
  if g[2] == 0 then
    puts "Un probleme est survenu"
    puts "Le code du devoir est errone ou la note de l\'etudiant est superieur a la note maximum "
  else 
    puts "l\'etudiant " + code_permanent + 
            " a obtenu la note de " + note.to_s + 
            " au devoir " + g[1]
    puts " Note enregistree avec succes" 
  end

end
end

#2eme fonctionnalite
desc 'Calculer la moyenne de chaque étudiant de la classe '
arg_name ' '
command :moyenne_etudiants do |c|
  c.action do |global_options,options,args|
  fichier_etudiants = global_options[:fichier_etudiants]
  fichier_cours = global_options[:fichier_cours]
  
  GestionDeNotes.fichier_etudiants = fichier_etudiants
  GestionDeNotes.fichier_cours = fichier_cours

  m = GestionDeNotes.moyenne_etudiants
  
  if m[0] == 0 then
    puts "Oups!! Toutes les moyennes n\'ont pas ete calculees !!"
    m[1].each do |etudiant|
      puts "La moyenne de l\'etudiant " +etudiant.code+ " n\'a pas ete calculee car il n\'a pas toutes ses notes"
    end

    if m[2] == nil then
      m[2].each do |etudiant|
        puts "L\'etudiant " +etudiant.code+ " a obtenu une moyenne finale de " +etudiant.moyenne.to_s
      end 
    end

  else 
    puts "Toutes les moyennes ont ete calculees avec succes!"
  end
  end
end


#3eme fonctionnalite
desc 'Calculer la moyenne du groupe'
arg_name ' '
command :moyenne_classe do |c|
  c.action do |global_options,options,args|
  fichier_etudiants = global_options[:fichier_etudiants]
  fichier_cours = global_options[:fichier_cours]
   GestionDeNotes.fichier_etudiants = fichier_etudiants
  GestionDeNotes.fichier_cours = fichier_cours

  mc = GestionDeNotes.moyenne_classe
    puts "la moyenne de la classe est " +mc.to_s
  end
end


#4eme fonctionnalite
desc 'Attribuer les cotes'
arg_name ' '
command :attribuer_cote do |c|
   c.desc 'Calculer les cotes selon les lettres que l utilisateur aurait fourni'
   c.default_value 'A A- B+ B E'
  c.flag :f
  c.action do |global_options,options,args|
  fichier_etudiants = global_options[:fichier_etudiants]
  fichier_cours = global_options[:fichier_cours]
  c = GestionDeNotes.attribuer_cote
    puts c
  end
end


#5eme Fonctionnalite
desc 'Afficher les informations de la classe et des etudiants'
arg_name ' '
command :afficher do |c|
  c.action do |global_options,options,args|
    fichier_etudiants = global_options[:fichier_etudiants]
    fichier_cours = global_options[:fichier_cours]

    GestionDeNotes.fichier_etudiants = fichier_etudiants
    GestionDeNotes.fichier_cours = fichier_cours

    t = GestionDeNotes.afficher
    t.each do |element|
      puts element.join(",")
    end
  end
end


pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end
post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end
on_error do |exception|
  STDERR.puts "#{exception.class}({#exception.message})"
  STDERR.puts exception.backtrace
  false
end
exit run(ARGV)
