module GestionDeNotes
require 'csv'

#*********methode pour enregistrer la note d'un etudiant**********

#****************************************************************


  def self.enregistrer_note( *args )

    #initialisation des variables
    existe = 0
    succes = 0
    fichier_Delete = 0
    nom_devoir = ''

    #lecture du fichier
    tableau_etudiants = LectureEcriture.lecture_fichier('liste_etudiants_defaut.csv')
    tableau_travaux = LectureEcriture.lecture_fichier_cours('informations_cours_defaut.csv')

  #traitement
  #verifier que l id_devoir specifie existe
    tableau_travaux.each do |travail|
      if travail.id_devoir == args[1] and travail.note_max >= args[2] then
        existe = 1 
        nom_devoir = travail.nom_devoir
      end
    end

    puts "Le devoir n\'existe pas ou la note de l\'etudiant est superieur a la note maximum " if existe == 0

  #inserer la note dans le tableau des etudiants
    tableau_etudiants.each do |etudiant|
      if existe == 1 and etudiant.code == args[0] then
        etudiant.notes[nom_devoir] = args[2] 
        succes = 1
        puts "l\'etudiant " + etudiant.nom + " " + etudiant.prenom + 
            " de matricule " + args[0] + 
            " a obtenu la note de " + args[2] + 
            " pour " + nom_devoir
      end
    end
 
#ecrire dans le fichier
    if succes == 1 then
      LectureEcriture.ecriture_fichier(tableau_etudiants,
		       'liste_etudiants_defaut.csv')
      
      return " Note enregistree avec succes"
    else 
      return "Un probleme est survenu"
    end
  end


#***************Calculer la moyenne de chaque Ã©tudiant de la classe*******

#*************************************************************************

  def self.moyenne_etudiants

#initialisation des variables
    i = 0

#lecture des fichiers
    tableau_etudiants = LectureEcriture.lecture_fichier('liste_etudiants_defaut.csv')
    tableau_travaux = LectureEcriture.lecture_fichier_cours('informations_cours_defaut.csv')
    
  #calculer la moyenne de chaque etudiant
    tableau_etudiants.each do |etudiant|
      somme_ponderation = 0
      note_ponderee = 0
      tableau_notes = etudiant.notes
      tableau_notes.each do |key, value|
        tableau_travaux.each do |travail|
          if key == travail.nom_devoir then
            note_ponderee = note_ponderee + value.to_f * 100 * travail.ponderation.to_f / travail.note_max.to_f
            somme_ponderation = somme_ponderation + travail.ponderation.to_f
          end
        end
      end

      if somme_ponderation == 0 then
      	puts "oups!! une erreur est survenue, l\'etudiant " +etudiant.code+ " n\'a pas toutes ses notes"
      else
      	etudiant.moyenne = note_ponderee / somme_ponderation
      	i+=1
      	puts "L\'etudiant " +etudiant.code+ " a obtenu une moyenne finale de " +etudiant.moyenne.to_s
      end  
    end

  #modifier le fichier CSV pour inserer la moyenne de chaque etudiant
    if tableau_etudiants.length == i then
      LectureEcriture.ecriture_fichier(tableau_etudiants,
		       'liste_etudiants_defaut.csv')
      return "Les moyennes ont ete calculees avec succes!"
    else 
      return "Oups!! Toutes les moyennes n\'ont pas ete calculees !!"
    end
  end

#******************fonction pour attribuer les cotes**************************************

#******************************************************************************************

  def self.attribuer_cote
    
    #initialisation
    moyenne_de_la_classe = GestionDeNotes.moyenne_classe
    succes = 0

    #lecture fichier
    tableau_etudiants = LectureEcriture.lecture_fichier('liste_etudiants_defaut.csv')
    
    #traitement
    tableau_etudiants.each do |etudiant|
      succes = 0 if etudiant.moyenne.to_f <= 0.0 and etudiant.moyenne.to_f >= 100.0
      etudiant.cote = "A" if etudiant.moyenne.to_f <= 100.0 and etudiant.moyenne.to_f >= 85.0
      etudiant.cote = "A-" if etudiant.moyenne.to_f <= 84.0 and etudiant.moyenne.to_f >= 80.0
      etudiant.cote = "B+" if etudiant.moyenne.to_f <= 79.0 and etudiant.moyenne.to_f >= 75.0
      etudiant.cote = "B" if etudiant.moyenne.to_f <= 74.0 and etudiant.moyenne.to_f >= 70.0
      etudiant.cote = "E" if etudiant.moyenne.to_f < 70.0
      succes = 1
      puts "L\'etudiant " + etudiant.code + " a obtenu la cote " + etudiant.cote
    end

  #modifier le fichier pour inserer les cotes de chaque etudiant
    if succes == 1 then
      LectureEcriture.ecriture_fichier(tableau_etudiants,
		                       'liste_etudiants_defaut.csv')
      return "Cote enregistree"
    else 
      return "Erreur"
    end
  end

#************************calculer la moyenne de la classe**********************************

#********************************************************************************************

  def self.moyenne_classe
    tableau_etudiants = LectureEcriture.lecture_fichier('liste_etudiants_defaut.csv')
    somme = 0
    compteur = 0  
    succes = 0
    tableau_etudiants.each do |etudiant|
      somme  += etudiant.moyenne.to_f
      compteur+=1
      succes = 1
    end

    #Diviser la somme par le nombre d'etudiants
    moyenne = somme / compteur
    puts "la moyenne de la classe est "
    if succes == 1 then
      tableau_travaux = LectureEcriture.lecture_fichier_cours('informations_cours_defaut.csv')
      LectureEcriture.ecriture_fichier_cours(tableau_travaux,moyenne,'informations_cours_defaut.csv')
      return moyenne
    else 
      return "Oups!! erreur quelque part"
    end  
  end



  #********************************afficher les informations de la classe*************************************

  #**********************************************************************************************************
  def self.afficher
    CSV.foreach('informations_cours_defaut.csv') do |ligne|
      puts ligne.inspect
    end

    CSV.foreach('liste_etudiants_defaut.csv') do |ligne|
      puts ligne.inspect
    end   
  end

end